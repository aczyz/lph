
==================== FINAL INTERFACE ====================
2018-05-10 09:49:55.66571919 UTC

interface lph-0.1.0.0-9ChSTD8BH50CCOnZTmPQ4C:Graph 8022
  interface hash: bb0dfe8d216c8d54b7cfdc958feed63e
  ABI hash: ab078ba4c5a29083074eb40419085ba1
  export-list hash: edac960e23907a6ed45bb17c17f37bbd
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 26e0ff4b0ff758fc4ebf6a516aed248e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Graph.atomToInt
  Graph.bounds'
  Graph.edges'
  Graph.graph
  Graph.graphG
  Graph.intToAtom
  Graph.zipEdges
module dependencies: Formulas Operator
package dependencies: array-0.5.2.0 base-4.10.1.0*
                      containers-0.5.10.2* deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Graph
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Tree
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  containers-0.5.10.2:Data.Graph 6d23d46547ce557456a2360f2f999a75
import  -/  Formulas 29828620833d925386bc7e66a6485a46
  exports: 18cdaffd124661ac46eb1dd5b1e7aefc
  A 3f2135a5a1b94435b51125ac851094f8
  Atom 5e63cb212f133c594f84fba19ed012fa
  LogicP 677480e6f3d861e38d8ed3d2537b7d36
  bP 88ea949769107c8f2be51f50ca3e3425
  hClBody 42175d242c9bfc43cef80fa8a2ede676
  hClHead 78d0c0794c4a586076e791218a1f42ed
import  -/  Operator 8dc6fbb1c3f160df5ba9a64af21ba612
  exports: 532a2d9519c6011070db5787766fd4fc
8bd5939bda56bf3cfaafdac8b242efe9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Graph.$trModule3 Graph.$trModule1) -}
34ea911ae1f5c3f0f93020cf60ca26f8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Graph.$trModule2) -}
325d28f88bcce14d1c749a9e3379f8a7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Graph"#) -}
ee6863312c421cd3d8355c411e2835fd
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Graph.$trModule4) -}
19305bc947dbdcaab9dc69b4e553e8b7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("lph-0.1.0.0-9ChSTD8BH50CCOnZTmPQ4C"#) -}
65eb349c8ce95280689908b76c4f2d06
  $wbounds' :: Formulas.LogicP -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Formulas.LogicP) ->
                 (# case Graph.atomToInt (Formulas.bP w) of wild {
                      [] -> GHC.List.minimum2
                      : ipv ipv1
                      -> case ipv of ww { GHC.Types.I# ww1 ->
                         case GHC.List.$wgo1 ipv1 ww1 of ww2 { DEFAULT ->
                         GHC.Types.I# ww2 } } },
                    case Graph.atomToInt (Formulas.bP w) of wild {
                      [] -> GHC.List.maximum2
                      : ipv ipv1
                      -> case ipv of ww { GHC.Types.I# ww1 ->
                         case GHC.List.$wgo ipv1 ww1 of ww2 { DEFAULT ->
                         GHC.Types.I# ww2 } } } #)) -}
16139b699784c1ec7b9ba226872a9d3b
  atomToInt :: [Formulas.Atom] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
614d9467634ca73b5b3315c442c3a029
  bounds' :: Formulas.LogicP -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Formulas.LogicP) ->
                 case Graph.$wbounds' w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
ad0787322dee57637e3483304478d6cd
  edges' :: Formulas.LogicP -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U> -}
984fb06ffa5fc94caf1fa185c2318115
  graph :: Formulas.LogicP -> Data.Graph.Graph
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True) Graph.graphG -}
cfee02d7f8215591364e38bbfa5b450b
  graphG :: Formulas.LogicP -> Data.Graph.Graph
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (x :: Formulas.LogicP) ->
                 case Graph.$wbounds' x of ww { (#,#) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 Data.Graph.$wbuildG ww4 ww6 (Graph.edges' x) } } }) -}
4ccd4ad4fc9f85f4eb477d516a09232c
  intToAtom :: [GHC.Types.Int] -> [Formulas.Atom]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
618b563083b4f718427374c8b86ea86e
  zipEdges ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> [(GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

