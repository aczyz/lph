
==================== FINAL INTERFACE ====================
2018-05-10 09:49:56.349071245 UTC

interface lph-0.1.0.0-9ChSTD8BH50CCOnZTmPQ4C:LvlMap 8022
  interface hash: a7f023ad4b5d469456aadd3c464cc192
  ABI hash: aecd053c0a098aed87b8eab1e119873e
  export-list hash: acb5261f5c8f66d3c384e3b72169068d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 26e0ff4b0ff758fc4ebf6a516aed248e
  sig of: Nothing
  used TH splices: False
  where
exports:
  LvlMap.mapNum
  LvlMap.mapNum'
  LvlMap.numList
  LvlMap.onlyBody
  LvlMap.onlyHead
  LvlMap.perms
  LvlMap.replaceNum
  LvlMap.sortElems
module dependencies: Completion Examples Formulas Graph Operator
package dependencies: array-0.5.2.0 base-4.10.1.0
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Graph
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Tree
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  containers-0.5.10.2:Data.Graph 6d23d46547ce557456a2360f2f999a75
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  Completion edf95d60c1ff68a9c6ec394965d2c9e3
  exports: 8c6defe0cf84ccd6e5c7b6af9967be13
import  -/  Examples 31ea72c521afb08e4b11851d1a44d003
  exports: 7cd463041272ca4bcb59a5a042e25db4
import  -/  Formulas 29828620833d925386bc7e66a6485a46
  exports: 18cdaffd124661ac46eb1dd5b1e7aefc
  Atom 5e63cb212f133c594f84fba19ed012fa
  LogicP 677480e6f3d861e38d8ed3d2537b7d36
  bP 88ea949769107c8f2be51f50ca3e3425
  bPBody ac4f3d230a8f395522a17d3379c04a78
  bPHead db2886ee4541d23fd699dcfe68b2a44a
import  -/  Graph ab078ba4c5a29083074eb40419085ba1
  exports: edac960e23907a6ed45bb17c17f37bbd
import  -/  Operator 8dc6fbb1c3f160df5ba9a64af21ba612
  exports: 532a2d9519c6011070db5787766fd4fc
e0f1ebb7360b46c017a05bcd21a66648
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   LvlMap.$trModule3
                   LvlMap.$trModule1) -}
c9f8d0bf97f5ca9d27c1b073fb4690da
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LvlMap.$trModule2) -}
86f327c66d876f654b9a97b6bb52297d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LvlMap"#) -}
e23dcf1d35064963ead9c19788f6d54c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LvlMap.$trModule4) -}
d47f0215a2b744499dbbbadd2d62dd09
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("lph-0.1.0.0-9ChSTD8BH50CCOnZTmPQ4C"#) -}
748956a8123f3ccbbb2a7419fe236fef
  $wmapNum ::
    [Formulas.Atom]
    -> [Formulas.Atom]
    -> [GHC.Types.Int]
    -> (# [GHC.Types.Int], [GHC.Types.Int], [GHC.Types.Int] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Formulas.Atom])
                   (ww1 :: [Formulas.Atom])
                   (w :: [GHC.Types.Int]) ->
                 let {
                   x :: [GHC.Types.Int]
                   = case GHC.List.$wlenAcc @ GHC.Types.Int w 0# of ww2 { DEFAULT ->
                     case GHC.List.$wlenAcc @ Formulas.Atom ww 0# of ww3 { DEFAULT ->
                     let {
                       x1 :: GHC.Prim.Int# = GHC.Prim.-# ww2 ww3
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x1 0#) of wild {
                       GHC.Types.False -> LvlMap.$wunsafeDrop @ GHC.Types.Int x1 w
                       GHC.Types.True -> w } } }
                 } in
                 let {
                   z :: [GHC.Types.Int]
                   = case GHC.List.$wlenAcc @ Formulas.Atom ww1 0# of ww2 { DEFAULT ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# 0# ww2) of wild {
                       GHC.Types.False -> GHC.Types.[] @ GHC.Types.Int
                       GHC.Types.True -> GHC.List.$wunsafeTake @ GHC.Types.Int ww2 w } }
                 } in
                 (# x, LvlMap.mapNum_go (GHC.Base.++ @ GHC.Types.Int x z) w,
                    z #)) -}
8b56c1acb68a3a23416baa35bfffd0d1
  $wmapNum' ::
    Formulas.LogicP
    -> (# [GHC.Types.Int], [GHC.Types.Int], [GHC.Types.Int] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Formulas.LogicP) ->
                 case LvlMap.$wsortElems w of ww { (#,,#) ww1 ww2 ww3 ->
                 LvlMap.$wmapNum
                   ww1
                   ww3
                   (case Formulas.bP w of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Int
                      : ipv ipv1
                      -> case GHC.List.$wlenAcc
                                @ Formulas.Atom
                                wild
                                0# of ww4 { DEFAULT ->
                         GHC.Enum.eftInt 1# ww4 } }) }) -}
3101a4161781405a0da659f4570607d2
  $wsortElems ::
    Formulas.LogicP
    -> (# [Formulas.Atom], [Formulas.Atom], [Formulas.Atom] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Formulas.LogicP) ->
                 (# let {
                      lvl1 :: [Formulas.Atom] = Formulas.bPBody w
                    } in
                    letrec {
                      go :: [Formulas.Atom] -> [Formulas.Atom]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [Formulas.Atom]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ Formulas.Atom
                          : y ys
                          -> case w of wild1 {
                               [] -> go ys
                               : ipv ipv1
                               -> case GHC.List.elem
                                         @ Formulas.Atom
                                         Formulas.$fEqAtom
                                         y
                                         lvl1 of wild2 {
                                    GHC.Types.False -> GHC.Types.: @ Formulas.Atom y (go ys)
                                    GHC.Types.True -> go ys } } }
                    } in
                    go (Formulas.bPHead w),
                    let {
                      lvl1 :: [Formulas.Atom] = Formulas.bPBody w
                    } in
                    letrec {
                      go :: [Formulas.Atom] -> [Formulas.Atom]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [Formulas.Atom]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ Formulas.Atom
                          : y ys
                          -> case w of wild1 {
                               [] -> GHC.Types.: @ Formulas.Atom y (go ys)
                               : ipv ipv1
                               -> case GHC.List.elem
                                         @ Formulas.Atom
                                         Formulas.$fEqAtom
                                         y
                                         lvl1 of wild2 {
                                    GHC.Types.False -> go ys
                                    GHC.Types.True -> GHC.Types.: @ Formulas.Atom y (go ys) } } }
                    } in
                    go (Formulas.bPHead w),
                    let {
                      lvl1 :: [Formulas.Atom] = Formulas.bPHead w
                    } in
                    letrec {
                      go :: [Formulas.Atom] -> [Formulas.Atom]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [Formulas.Atom]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ Formulas.Atom
                          : y ys
                          -> case w of wild1 {
                               [] -> go ys
                               : ipv ipv1
                               -> case GHC.List.elem
                                         @ Formulas.Atom
                                         Formulas.$fEqAtom
                                         y
                                         lvl1 of wild2 {
                                    GHC.Types.False -> GHC.Types.: @ Formulas.Atom y (go ys)
                                    GHC.Types.True -> go ys } } }
                    } in
                    go (Formulas.bPBody w) #)) -}
ebd2a4d80bd4f5446f77da0070e0ae11
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
98bf768efc495e6ec10f9305bb6d01ad
  mapNum ::
    ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom])
    -> [GHC.Types.Int]
    -> ([GHC.Types.Int], [GHC.Types.Int], [GHC.Types.Int])
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(1*U,A,1*U)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom]))
                   (w1 :: [GHC.Types.Int]) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case LvlMap.$wmapNum ww1 ww3 w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (ww5, ww6, ww7) } }) -}
a4d1c80831b29081c68e71ee331d70a7
  mapNum' ::
    Formulas.LogicP
    -> ([GHC.Types.Int], [GHC.Types.Int], [GHC.Types.Int])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Formulas.LogicP) ->
                 case LvlMap.$wmapNum' w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
a11184dbe8e55758d65d2eaca3bf837e
  mapNum_go :: [GHC.Types.Int] -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
72a6eae718118e29f4306a5e9f92ccbb
  numList :: [Formulas.Atom] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Formulas.Atom]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Types.Int
                   : ipv ipv1
                   -> case GHC.List.$wlenAcc
                             @ Formulas.Atom
                             wild
                             0# of ww2 { DEFAULT ->
                      GHC.Enum.eftInt 1# ww2 } }) -}
77ba670c0658c82a4fd35d428c676b8c
  onlyBody :: Formulas.LogicP -> Formulas.Atom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ds :: [Formulas.HClause]) (ds1 :: Formulas.Atom) ->
                 case ds of wild {
                   [] -> GHC.Types.False
                   : ipv ipv1
                   -> case GHC.List.elem
                             @ Formulas.Atom
                             Formulas.$fEqAtom
                             ds1
                             (Formulas.bPHead wild) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
73e819b4b55e7235d192c04fe62c4596
  onlyHead :: Formulas.LogicP -> Formulas.Atom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ds :: [Formulas.HClause]) (ds1 :: Formulas.Atom) ->
                 case ds of wild {
                   [] -> GHC.Types.False
                   : ipv ipv1
                   -> case GHC.List.elem
                             @ Formulas.Atom
                             Formulas.$fEqAtom
                             ds1
                             (Formulas.bPBody wild) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
151e371ca2e89a0fdb6edcb76d626835
  perms ::
    ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom])
    -> [[Formulas.Atom]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,U,A)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom])) ->
                 case ds of wild { (,,) a b c ->
                 Data.OldList.permutations @ Formulas.Atom b }) -}
14aaa68705251c520b84e9c21c4c12e9
  replaceNum ::
    ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom])
    -> [[Formulas.Atom]]
    -> ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom])
  {- Arity: 2, Strictness: <S,1*U(U,A,U)><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom]))
                   (ds1 :: [[Formulas.Atom]]) ->
                 case ds of wild { (,,) a b c ->
                 case ds1 of wild1 {
                   [] -> LvlMap.replaceNum1 : x xs -> (a, x, c) } }) -}
b28b835704abce8f0e228a9f41c81d5a
  replaceNum1 :: ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom])
  {- Strictness: x -}
a90bb31ffc9b481063ed70f40c6a529a
  sortElems ::
    Formulas.LogicP
    -> ([Formulas.Atom], [Formulas.Atom], [Formulas.Atom])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Formulas.LogicP) ->
                 case LvlMap.$wsortElems w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

